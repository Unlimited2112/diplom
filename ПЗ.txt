Министерство образования Республики Беларусь

Учреждение образования
БЕЛОРУССКИЙ ГОСУДАРСТВЕННЫЙ УНИВЕРСИТЕТ
ИНФОРМАТИКИ И РАДИОЭЛЕКТРОНИКИ


Факультет	Инновационного непрерывного образования

Кафедра	Информатики


К защите допустить:
Заведующий кафедрой информатики

____________ Н.А. Волорова


ПОЯСНИТЕЛЬНАЯ ЗАПИСКА
к дипломному проекту
на тему

система нормирования материалов в конструкторской документации
БГУИР ДП 1-40 04 01 00 103 ПЗ



Студент	А.В. Авхимович

Руководитель	А.В. Жвакина

Консультанты:
   от кафедры информатики	А.С. Летохо
   по экономической части	Д.А. Савчик

Нормоконтролер	В.В. Шиманский

Рецензент	




Минск 2019

Реферат
Дипломный проект представлен следующим образом. Чертежи и плакаты: 6 листов формата А1. Пояснительная записка: 42 страниц, 30 рисунков, 4 таблицы, 6 литературных источников, 1 приложение.

Ключевые слова: КЛИЕНТСКАЯ ЧАСТЬ, СЕРВЕРНАЯ ЧАСТЬ, БАЗА ДАННЫХ

Целью дипломного проекта является разработка Системы нормирования материалов по конструкторской документации для отдела технологического инжиниринга машиностроительного завода, которая позволяет удобно вести базу данных материалов, график посчитаных(пронармированных) узлов изделий, генерировать отчеты в формате данных Microsoft Excel, и другие возможности.
Для достижения цели дипломного проекта было разработано клиент-серверное приложение, а также подобраны и настроены другие программные средства, необходимые для работы системы.
При разработке и внедрении приложения использовался такой стек технологий как CSS, MySQL.
      В разделе введения описано назначение разрабатываемого ПС. 
      В первой главе описан обзор аналогов программного продукта, а также сформированы требований к проектируемому ПС.
      Во второй главе определены требования к программе, а также цели и задачи проектирования.
      В третьей главе представлен процесс проектирования, используемые технологии и средства разработки, а такде выбранная архитектура приложения.
      В четрвертой главе рассмотрен процесс разработки программного средства: приведена структура проекта, а также классы моделеей, контроллеров и представлений.
      В пятой главе приведено описание использования ПС.
В шестой главе приведено технико-экономическое обоснование, произведен расчет затрат организации-подрядчика на выполнение заказываемых работ по проекту, рассчитана прибыль и рентабельность для организации-подрядчика. 
      Заключение содержит выводы по данному дипломному проекту и результаты его выполнения и внедрения.
Дипломный проект является завершенным, поставленная задача решена в полной мере.


Министерство образования Республики Беларусь
Учреждение образования
БЕЛОРУССКИЙ ГОСУДАРСТВЕННЫЙ УНИВЕРСИТЕТ ИНФОРМАТИКИ И РАДИОЭЛЕКТРОНИКИФакультет                ИНОКафедраИнформатикиСпециальность1-40 04 01Специализация00УТВЕРЖДАЮН.А. Волорова«»2019 г.ЗАДАНИЕпо дипломному проекту студентаАвхимовича Алексея Валерьевича(фамилия, имя, отчество) 1. Тема проекта:Система нормирования материалов в конструкторской документацииутверждена приказом по университету от«28»апреля2019 г.№692-с2. Срок сдачи студентом законченной работы3. Исходные данные к проектуТип программного средства – Cистема;Языки программирования – Java.Назначение разработки: дать возможность пользователям программного средствауправлять взаимоотношениями с клиентами.4. Содержание пояснительной записки (перечень подлежащих разработке вопросов) Введение1.АНАЛИЗ ПРЕДМЕТНОЙ ОБЛАСТИ2. ПОСТАНОВКА ЗАДАЧИ3. ПРОЕКТИРОВАНИЕ ПС4. РАЗРАБОТКА ПС5. ОПИСАНИЕ ИСПОЛЬЗОВАНИЯ6. ТЕХНИКО-ЭКОНОМИЧЕСКОЕ ОБОСНОВАНИЕ ПРОЕКТА ПО РАЗРАБОТКЕ ПСЗАКЛЮЧЕНИЕСПИСОК ИСПОЛЬЗОВАННЫХ ИСТОЧНИКОВПРИЛОЖЕНИЕ А. ЛИСТИНГ ПРОГРАММНОГО КОДА


5. Перечень графического материала (с точным указанием наименования) и обозначениявида и типа материала)Схема структуры программы – формат А1, лист 1Диаграмма классов – формат А1, лист 1Схема базы данных – формат А1, лист 1Миграция связанных записей. Схема программы – формат А1, лист 1Диаграмма потоков данных системы. Плакат – формат А1, лист 1Визуальный интерфейс программного средства. Плакат – формат А1, лист 16. Содержание задания по технико-экономическому обоснованиюРасчет затрат на разработку, прибыли и рентабельности проекта для компании-подрядчика.Задание выдалЕ.Е. Марченкова

КАЛЕНДАРНЫЙ ПЛАН

Наименование этапов дипломного проекта (работы)Объем этапа в %Срок выполнения этапаПримечаниеАнализ предметной области, разработка технического задания, выбор подходящей основы для реализации2028.04 – 06.05Проектирование архитектуры приложения1007.05 – 11.05Разработка модулей2012.05 – 20.05Разработка API и миграция данных2021.05 – 29.05Расчет экономической эффективности1030.05 – 04.06Оформление графического материала и пояснительной записки2005.06 – 14.06
Дата выдачи задания28 апреля 2019 г.РуководительА.В. ЖвакинаЗадание принял к исполнениюА.В. Авхимович

Содержание

ВВЕДЕНИЕ	6
1.	АНАЛИЗ ПРЕДМЕТНОЙ ОБЛАСТИ	7
1.1	ОПИСАНИЕ ПРЕДМЕТНОЙ ОБЛАСТИ	7
1.2	Обзор аналогов программного продукта	8
1.3	Формирование требований к проектируемому ПС	9
2.	Постановка задачи	11
2.1	Требования к программе	11
2.2	Цели и задачи проектирования	11
3.	Проектирование ПС	13
3.1	Используемые технологии и средства разработки	13
3.1.1	Программная платформа Java	13
3.1.2	NetBeans	14
3.1.3	JavaFX	15
3.1.4	MySQL	16
3.1.5	Библиотека Apache POI	16
3.2	Архитектура приложения	16
4.	Разработка ПС	19
4.1	Реализация клиентского-приложения	19
5.	Описание использования	21
5.1	Система нормирования материалов в конструкторской документации	21
6.	ТЕХНИКО-ЭКОНОМИЧЕСКОЕ ОБОСНОВАНИЕ ПРОЕКТА ПО РАЗРАБОТКЕ ПРОГРАММНОГО СРЕДСТВА	28
6.1	Общая характеристика программного средства	28
6.2	Расчет затрат на разработку ПО	28
6.2.1	Расчет затрат на основную заработную плату разработчиков	28
6.2.2	Расчет  затрат  на  дополнительную  заработную  плату	29
6.2.3	Расчет затрат на социальные нужды	30
6.2.4	Расчет прочих затрат	30
6.3	Оценка результата от продажи ПО. Расчет экономического эффекта.	31
6.4	Расчет показателей эффективности инвестиций в разработку ПО	32
6.5	Выводы по технико-экономическому обоснованию	35
ЗАКЛЮЧЕНИЕ	36
СПИСОК ИСПОЛЬЗОВАННЫХ ИСТОЧНИКОВ	37
ПРИЛОЖЕНИЕ А. ЛИСТИНГ ПРОГРАММНОГО КОДА	38


ВВЕДЕНИЕ
      На сегодняшний день трудно представить нормировани материалов технологами вручную используя Microsoft Excel. 
      В связи с этим будет разработано программное обеспечение, Система нормирования материалов по конструкторской документации призванное облегчить, систематизировать и автоматизировать работу технологов.
      Для реализации поставленной цели необходимо выполнить следую-щие задачи:
      Изучить базу материалов предприятия;
      Собрать информацию о расходе материалов предприятия, такие как припуски на обработку, резку, а также определить допустимые коэффиценты материала на отход;
      Рассмотреть и обобщить собранную информацию.

       АНАЛИЗ ПРЕДМЕТНОЙ ОБЛАСТИ 

  Описание предметногй области

      На современном производстве одной из важнейших составляющих себестоимости изделия является норма расхода материалов, быстрый и качественный расчет которой является залогом верного расчета себестоимости изделия. Эта работа должна быть проведена максимально быстро и точно. Если норма расхода, а соответственно, и цена будут завышены, то заказчик уйдет к другому производителю, а, с другой стороны, норма если окажется заниженной, то пострадает производитель.
      
      Болышая часть современного программного обеспечения системы технологической подготовки производства, представленного на рынке, предлагает выполиять подетальный расчет норм расхода материалов на основе разработанного технологического процесса. Но несмотря на то, что разработка технологического процесса позволяет определить все используемые в производстве детали материалы, включая вспомогательные, такие сроки разработки норм расхода оказываются слишком велики. Так как основную стоимость составляет основной материал детали, а разработка технологических процессов на каждую деталь и сборочную единицу изделия требует существенных затрат времени, целесообразным является разработка подетальных норм расхода на основании чертежей и соответствующих нормативов припусков на обработку.
      
      Разрабатываемая программа позволит рассчитывать норму расхода и размеры необходимой заготовки для деталей, не требующих деформирующих методов обработки (ковка, гибка и т. п.). По определению, норма расхода материалов на изделия (детали) —максимально допустимое плановое количество материала на изготовление изделия (детали) при установленном качестве и условиях производства. Соответственно, для определения норм расхода по установленным нормативам возможно использование максимальных значений припусков, исходя из имеющегося на предприятии оборудования.
      
      Исходными данными для расчета в программе будут являются габаритные размеры детали по чертежу, тип заготовки (лист, труба, круг и т. д.).
      После чего формируется SQL-запрос к базе данных и формируется норма расхода материала.

      Внедрение данного программного продукта позволит значительно сократить время разработки норм расхода материалов, снизить вероятность ошибок инженера и, кроме того, сократить время обучения работника бюро материальных нормативов.
      
       Обзор аналогов программного продукта 

      В настоящий момент на рынке представлены следующие приложения с похожей функциональностью. Проведем их анализ.
      
 Intermech АРМ материального нормирования.
      Приложение, предназначенное для расчет материальных нормативов и формирование сводных ведомостей по материалам.
      
      Расчет материальных нормативов
      АРМ материального нормирования представляет собой узкоспециализированное автоматизированное рабочее место, посредством которого осуществляется:
      
      Назначение вариантов заготовок, вспомогательных материалов на изделие/версию изделия с учетом входимости в различные сборочные узлы или заказы.
      Автоматизация расчета заготовок и вспомогательных материалов при помощи встроенной Экспертной системы.
      Выпуск извещений на изменение заготовок и вспомогательных материалов с сохранением истории изменений.
      Получение сводных ведомостей норм расхода материалов на изделие, заказ, по цеху и другим условиям.
      
      
      Единое информационное пространство
      Единое информационное пространство между технологическими и конструкторскими службами предприятия осуществляется при помощи PDM-системы Search, которая входит в состав АРМ материального нормирования.
      
      Электронный документооборот между различными подразделениями.
      Ведение списка пользователей, которые могут работать с системой (вход в систему по паролю), обеспечение безопасности путем назначения пользователям прав доступа на выполнение тех или иных действий.
      Получение выборок изделий и техпроцессов по разнообразным критериям.
      Система IMBase обеспечивает ведение единой конструкторско-технологической базы данных. Широкий спектр возможностей по сопровождению информационной базы позволяет адаптировать систему к условиям конкретного предприятия. Настройка прав доступа к любому элементу системы обеспечивает требуемый уровень безопасности для конкретного пользователя.
      
      База данных по технологическому назначению содержит следующую информацию:
      
      Применяемые основные и вспомогательные материалы.
      Виды заготовок и их применяемость по сортаменту.
      Методика расчета материального нормирования.
      Комплекты форм выходных документов.
      
 Нормирование материалов
      Программа Нормирование материалов предназначается для назначения заготовки детали, автоматизации расчета нормы расхода основного материала.
      При расчете заготовки учитываются припуски на обработку, некратность размеров поставляемого материала и другие нормативы технологических потерь. В зависимости от вида и профиля заготовки пользователю предоставляется возможность выбрать необходимый вид расчета. Для оптимизации расхода материалов предусмотрена возможность выполнения нескольких вариантов расчета с выбором оптимального. Предыдущие варианты расчетов сохраняются в документе.
       
      В базовой поставке системы настроены алгоритмы расчета заготовок, получаемых резкой проката и горячей ковкой на молотах и прессах, а также горячей штамповкой на молотах.
      Встроенный редактор расчетов обеспечивает ввод пользователем алгоритмов нормирования материалов, используемых на предприятии.
      Программный интерфейс обеспечивает интеграцию с различными системами.
      В составе комплекса автоматизации конструкторско-технологической подготовки Система интегрирована:
       со Справочником Материалы и Сортаменты (и Материалы и Сортаменты для КОМПАС) для получения необходимых данных по применяемым на предприятии материалам и сортаментам, включая размеры профиля и свойства материала;
       с системой ЛОЦМАН:PLM для формирования технологических ведомостей по расходу материалов, передачи данных в различные системы подготовки, планирования и управления производством класса MRP II\ERP;
       с САПР ТП ВЕРТИКАЛЬ.[5]

      
       Формирование требований к проектируемому ПС

      Главной целью при разработке приложения будет являться реализация простого, понятного и удобного пользовательского интерфейса, с использованием технологии JavaFX от компании Oracle. 
      Основной упор будет делаться на качественную поддержку отслеживания посчитанных узлов изделия, формированию понятных и доходчивых сводных ведомостей материалов. Помимо этого, должны быть реализованы следующие возможности: 
      
 Возможность редактирования справочник Формул; 
 Возможность редактирования справочник Материалов;
 Возможность редактирования справочник Обозначений;
 Возможность редактирования справочник Вспомогательных материалов; 
 График учёта посчитанных узлов изделия;
 Представление узла изделия в виде спецификации
 Древовидное представление изделия
 Возможность поиска входимости узла;
 Возможность формирования отчета сводной ведомости материалов в формате данных Excel
 Возможность формирования данных в формате Excel для проверки корректности введенных данных с конструкторской документации
 Возможность формирования данных в формате Excel для раскроя материалов
 Возможность представление узла в виде спецификации
 Возможность задания параметров для расчет материала
 Возможность задания параметров для расчет вспомогательного материала

      Анализ предметной области показал, что аналоговые программные
средства имеет ряд недостатков таких как, неудобный пользовательский интерфейс, нет возможности вести учет(график) посчитанных узлов изделия, отсутствует возможность замены продублированных элементов, нет возможности сохранять сводную ведомость материалов в формате данных Microsoft Excel, а также отсутствует кроссплатформенность. В ходе разработки ПС будут устранены данные недостатки.


     Постановка задачи

      Требования к программе
      
      Необходимо реализовать клиент-серверное приложение с использованием выбранной технологии (в данном случае был выбран фреймворк JavaFX), которая позволяет обеспечить запуск необходимых задач и выполнять соответствующую работу клиент-серверного приложения по взаимодействию с пользователем через клиентскую часть приложения.
      
      Система нормирования материалов в конструкторской документации должна:
       Поддерживать одновременно работу 5-10 пользователей(размер отдела технологов);
       Поддерживать операционные системы: Windows xp, Windows 7, Windows 8, Windows 10, Linux.

 Цели и задачи проектирования

Задачи:
 Изучить предметную область, ознакомиться с возможностями фреймворка JavaFX при разработке приложений
 Изучить фреймворки, используемые совместно с изучаемой технологией JavaFX
 Создать проект Система нормирования материалов в конструкторской документации с наиболее общим функционалом.
Основной функциональностью системы нормирования материалов по конструкторсокой документации можно обозначить следующие возможности:
 Должно иметь представление в виде:
 Спецификации;
 Дерева.
 Добавление/удаление/редактирование элементов(обозначений) конструкторской документации. 
 Добавление/удаление/редактирование основных, вспомогательных материалов.
 Добавление/удаление/редактирование формул.
 Добавление/удаление/редактирование производственных заказов.
 Поиск вхождение элемента(обозначения) наследника к элементу (обозначению) родителя.
 График учета пронармированных узлов изделий.
 Формирование отчёта пронумерованного узла изделия в формате данных excel.
 Формирование данных узла изделия в формате данных excel для последующего раскроя материалов.
 Формирование данных узла изделия в формате данных excel для проверки корректности вводимых данных.
 Замена продублированных элементов.

В ходе постановки задач были определены требования к ПС такие как, поддержка одновременной работы 5-10 человек и возможность запуска клиентской части приложения на разных операционных системах: Windows XP/7/8/10, Linux,  macOS.


 Проектирование ПС
 Используемые технологии и средства разработки
     
     Выбор технологий является очень важным этапом разработки приложения. Выделим основные факторы, повлиявшие на выбор технологий:
      разрабатываемое ПО рассчитано на использование с платформой семейства Windows, но следует иметь в виду возможность смены платформы на такие операционные системы как Linux, macOS);
      в качестве технологий следует максимально ориентироваться на технологии с открытым исходным кодом;
      имеющийся опыт.
     Основываясь на этих факторах, целесообразно выбрать для разработки платформу Java. Разрабатываемому приложению потребуется выполнять массу разнообразных задач, для реализации которых крайне желательно использование сторонних библиотек. Платформа Java обеспечена поддержкой множества фреймворков, подходящих для реализации практически любой задачи. Кроме того, сам язык Java является элегантным, мультипарадигменным языком, позволяющим с легкостью писать красивый, поддерживаемый, расширяемый код.
 Программная платформа Java
      Программная платформа Java - ряд продуктов и спецификаций компании Sun Microsystems, ныне являющейся дочерней компанией корпорации Oracle, которые предоставляют систему для разработки программного обеспечения и развертывания его на любой платформе. Java используется в совершенно разнообразных системах, начиная от настольных компьютеров, заканчивая встраиваемыми устройствами. Язык Java отличают следующие особенности:
      -	Простота и мощь. Одним из ключевых факторов философии Java является простота обучения и написания кода.
      -	Безопасность. Программы на Java запускаются изолированно и не получают напрямую доступ к системным ресурсам.
      -	Объектная ориентированность. Объектная модель представлена в множестве языков. Java придерживается строгих принципов ООП, максимально стараясь не нарушать его парадигмы, но в то же время легко расширяется.
      -	Надежность. Java является языком со строгой типизацией, что является в современном мире как плюсом, так и минусом. Однако, благодаря строгой типизации Java способствует обнаружению ошибок на ранних этапах разработки программ. Кроме того, обеспечивается динамическое управление памятью, что является большим плюсом, так как в платформах, не обладающих такой возможностью, одной из главных из сложных проблем являются труднообнаружимые и зачастую критические ошибки, связанные с утечками памяти.
      -	Мультиплатформенность. Разработчики Java позволили не на словах, а на деле, написав программу один раз, запускать ее на любой платформе, где существует виртуальная машина Java.
      Виртуальная машина Java - основная часть Java Runtime Environment. Виртуальная машина исполняет байт-код Java, предварительно созданный компилятором из исходного кода. JVM может также использоваться для запуска программ на других языках, не только на Java. Обычно виртуальные машины Java содержат интерпретатор байт-кода и JIT-компилятор. Схема работы системы и набор байт-кодов виртуальной машины Java таковы, что позволяют достичь высокой производительности на этапе выполнения программы:
      -	код анализируется на соблюдение правил безопасности до запуска кода на выполнение
      -	работа с базовыми типами максимально эффективна
      -	методы в классах могут связываться как динамически, так и статически
      -	автоматический сборщик мусора работает в фоновом режиме, не замедляя основной поток исполнения и обеспечивает возврат свободной памяти в систему
      -	стандарт Java позволяет при необходимости писать критические к производительности участки кода на языках, являющимися нативными для целевой платформы
      -	язык Java обладает поддержкой многопоточности на уровне языка - часть примитивов синхронизации встроена в систему реального времени.
      Важным фактором является и то, что Java включает в себя набор стандартных библиотек, которые можно разбить на следующие пакеты:
      -	java.lang - базовый набор типов
      -	java.io - потоки и файлы произвольного доступа
      -	java.util - коллекции и некоторые другие утилиты  
 NetBeans

      NetBeans IDE — свободная интегрированная среда разработки приложений (IDE) на языках программирования Java, Python, PHP, JavaScript, C, C++, Ада[3] и ряда других.
      
      Проект NetBeans IDE поддерживается и спонсируется компанией Oracle, однако разработка NetBeans ведётся независимым сообществом разработчиков-энтузиастов (NetBeans Community) и компанией NetBeans Org.
      
      Последние версии NetBeans IDE поддерживают рефакторинг, профилирование, выделение синтаксических конструкций цветом, автодополнение набираемых конструкций на лету и множество предопределённых шаблонов кода.
      
      Для разработки программ в среде NetBeans и для успешной инсталляции и работы самой среды NetBeans должен быть предварительно установлен Sun JDK или J2EE SDK подходящей версии. Среда разработки NetBeans по-умолчанию поддерживала разработку для платформ J2SE и J2EE. Начиная с версии 6.0 NetBeans поддерживает разработку для мобильных платформ J2ME, C++ (только g++) и PHP без установки дополнительных компонентов.[4]
      
 JavaFX
      JavaFX представляет инструментарий для создания кроссплатформенных графических приложений на платформе Java.
      JavaFX позволяет создавать приложения с богатой насыщенной графикой благодаря использованию аппаратного ускорения графики и возможностей GPU.
      С помощью JavaFX можно создавать программы для различных операционных систем: Windows, MacOS, Linux и для самых различных устройств: десктопы, смартфоны, планшеты, встроенные устройства, ТВ. Приложение на JavaFX будет работать везде, где установлена исполняемая среда Java (JRE).
      JavaFX предоставляет большие возможности по сравнению с рядом других подобных платформ, в частности, по сравнению со Swing. Это и большой набор элементов управления, и возможности по работе с мультимедиа, двухмерной и трехмерной графикой, декларативный способ описания интерфейса с помощью языка разметки FXML, возможность стилизации интерфейса с помощью CSS, интеграция со Swing и многое другое.
      История JavaFX фактически началась в первой половине 2000-х годов, когда разработчик по имени Крис Оливер (Chris Oliver), будучи работником компании SeeBeyond, разработал для создания графических интерфейсов новый язык F3 (Froms Follows Functions). Впоследствии в 2005 году SeeBeyond была приобретена компанией Sun Microsystems (которая на тот момент развивала язык Java до покупки компанией Oracle). F3 был переименован в JavaFX, а Крис Оливер продолжил работу над новой платформой уже в рамках компании Sun. И в мае 2007 года Sun Microsystems публично анонсировала новую платформу для создания графических приложений. А 4 декабря 2008 года вышел JavaFX 1.0 SDK.
      После приобретения Sun Microsystems компанией Oracle в 2010 году была анонсирована, а в 2011 году вышла в релиз версия JavaFX 2.0. В первой версии JavaFX фактически представлял скиптовый язык. Во второй версии был полностью изменен подход. Скриптовый язык был убран, а платформа была полностью переписана фактически с нуля. Теперь создавать приложения можно было с помощью любого языка, который поддерживала JVM. Были добавлены новые API, интеграция со Swing и много других вещей.
      Следующими важными вехами в развитии платформы стали версии JavaFX 8 и особенно JavaFX 9, которая вышла в сентябре 2017 года вместе с Java 9 и привнесла в платформу модульность.
      В сентябре 2018 года вышла последняя версия фреймворка - JavaFX 11, которая была отделена от основной функциональности Java SE и стала использоваться как отдельный модуль.
      На данный момент JavaFX представляет предпочтительный способ для создания графических приложений с помощью языка Java, который пришел на смену AWT и Swing. Также стоит отметить, что для работы с JavaFX вместо Java теоретически можно использовать любой язык программирования, который поддерживается JVM.[3]
 MySQL
      MySQL – реляционная система управления базами данных со свободным кодом. Распространяется как свободно, так и под коммерческой лицензией. MySQL является решением для малых и средних приложений. СУБД портирована на большое количество платформ, имеет  API для множества языков. MySQL была выбрана в качестве реляционной базы данных для проекта из-за того, что она максимально удовлетворяет потребностям: на БД не ожидается большой нагрузки, развернуть ее можно на большинстве популярных платформ. Для связи с БД используем библиотеку JOOQ. Это легковесная современная библиотека, написанная в функциональном стиле и идеально интегрируется с возможностями Java 8, в частности StreamAPI.[2]
 Библиотека Apache POI
      Apache POI - предоставляет чистые библиотеки Java для чтения и записи файлов в форматах Microsoft Office, таких как Word, PowerPoint и Excel.

 Архитектура приложения

Проект представляет собой клиент-серверное приложение, использующее Фреймворк JavaFX. Отдельного описания заслуживает используемый при разработке шаблон MVC.
Model-view-controller (MVC, «модель-представление-контроллер», «модель-вид-контроллер») — схема использования нескольких шаблонов проектирования, с помощью которых модель приложения, пользовательский интерфейс и взаимодействие с пользователем разделены на три отдельных компонента таким образом, чтобы модификация одного из компонентов оказывала минимальное воздействие на остальные. Данная схема проектирования часто используется для построения архитектурного каркаса, когда переходят от теории к реализации в конкретной предметной области.


      
      Концепция MVC позволяет разделить данные, представление и обработку действий пользователя на три отдельных компонента:
      
 Модель (англ. Model). Модель предоставляет знания: данные и методы работы с этими данными, реагирует на запросы, изменяя своё состояние. Не содержит информации, как эти знания можно визуализировать.
 Представление, вид (англ. View). Отвечает за отображение информации (визуализацию). Часто в качестве представления выступает форма (окно) с графическими элементами.
 Контроллер (англ. Controller). Обеспечивает связь между пользователем и системой: контролирует ввод данных пользователем и использует модель и представление для реализации необходимой реакции.

В ходе проектирования ПС были выбраны: 
       язык программирования java обоснованный необходимостью кроссплатформенности ПС;
       среда разработки приложений NetBeans обоснованная своей доступностью;
       технология JavaFX позволяющая создавать приложения с богатой насыщенной графикой благодаря использованию аппаратного ускорения графики и возможностей GPU;
       чистая библиотека Java -  Apache POI для формирования сводных ведосомтей материалов в формате данных Microsoft Excel;
       база данных MySQL обоснованная своей доступностью.
А также был выбран шаблон MVC основной целью применения концепции которого  состоит в отделении бизнес логики(модели) от её визуализации (представления, вида).


 Разработка ПС

 Реализация клиентского-приложения

Перед вами дерево файлов/папок проекта:

      Основные сущности реализованы в папке Models.
      
      Сущность CommonMatreials описывает вспомогательные материаоы. Описана в файле CommonMatreials.java.

      Сущность CommonMaterialsValues описывает параметры вспомогательных материалов. Описана в файле CommonMaterialsValues.java

      Сущность Elements описывает элементы соответствующие обозначениям в конструкторской документации. Описана в Elements.java
      
      Сущность Formulas описывает формулы материалов. Описана в Formulas.java
      
      Сущность Materials описывает материалы. Описана в Materials.java
      
      Сущность MaterialsValues описывает параметры материалов. Описана в MaterialsValues.java
      
      Сущность Node описывает узел иерархической структуры данных. Описана в Node.java
      
      Сущность Orders описывает заказы. Описана в Orders.java
      
      Сущность Schedule предназначена для проставления даты в графике учёта нормированных узлов. Описана в Schedule.java
      
      Сущность Specification описывает конструкторскую спецификацию. Описана в Specification.java
      
      Сущность SpecificationCommonMaterials параметры вспомогательного материала. Описана в SpecificationCommonMaterials.java


      Контролеры описаны в папке Controllers.
      Контроллер MainViewController предоставляет взаимодействие с основными функциями приложения.
      
      Контроллер ParametersController предоставляет диалоговое окно для введения параметров вспомогательного материала.
      
      Контроллер SplashScreenController предоставляет загрузочный экран.
      
      Представления находятся в папке Views. Для простоты отметим, что по соглашениям и для корректной работы, представления для каждого контроллера находится в соответствующей папке с тем же именем, что и имя контроллера. 
      В ходе разработки ПС было разработано согласно шаблону MVC: классы модели 11 шт., классы контроллеры и представления 3 шт. соответственно. 


 Описание использования
      
 Система нормирования материалов в конструкторской документации
      Главная окно программы выглядит следующим образом. С левой стороны располагаться следующие вкладки:
 Спецификация в неё вводятся все спецификации конструкторской документации. 
 Дерево. Предназначена для просмотра/редактирования введённого узла в виде древовидного представления
 График. Предназначена для введения учёта пронумерованных узлов изделия.
 Заказы. Предназначена для добавления/удаления производственных заказов изделий.
 Обозначение. Предназначена для добавления/удаления/редактирования элементов(обозначений).
 Вспомогательные. Предназначена для добавления/удаления/редактирования вспомогательных материалов
 Формулы. Предназначена для добавления/удаления/редактирования формул материалов
 Материалы. Предназначена для добавления/удаления/редактирования материалов.
 С правой стороны располагаться 3 вкладки:
 Обозначение. Предназначена для редактирования элемента (обозначения) таких параметров как: Позиция, Обозначение, Кол(количество), ЕИ(единица измерения), Наименование, Примечание соответствующая конструкторской документации.
 Материал. Предназначена для присвоения материала деталям.
 Вспомогательные. Предназначена для присвоения вспомогательных материалов.


      Для начало работы, следует нажать на кнопку  , которая перекинет в кореньевой каталог

      Далее вводим обозначение по чертежу конструкторской документации ЛУИФ.К501-28.01.200. Нажимаем Enter или кнопку Добавить. В результате чего обозначение добавляется в конец списка. 





      Выбираем введенное обозначение и нажимаем кнопку . 

      Далее вводим обозначения входящие в конструкторскую спецификацию

      После добавления двух обозначений, проставляем их наименование и количество.




      Теперь выбрав обозначение, переходим на вкладку материал, где выбираем материал соответствующий материалу на чертеже, вводим его параметры (длину, ширину) и проставляем участок на который будет далее получен материал. Проделываем аналогичное со вторым обозначением.

      После завершения нормирования узла нажимаем кнопку . Попадаем по иерархии на уровень выше. Выбрав пронумерованный узел ЛУИФ.К501-28.01.200 нажимаем  кнопку файл->Сохранить НРМ.

      Далее создается отчет в файле ЛУИФ.К501-28.01.200.xlsx. 

	В ходе описания использования было наглядно показан цикл нормирования одной спецификации. Начиная от ввода данных с конструкторской документации и выводом сводной ведомости материалов в формате данных MS Excel.

 ТЕХНИКО-ЭКОНОМИЧЕСКОЕ ОБОСНОВАНИЕ ПРОЕКТА ПО РАЗРАБОТКЕ ПРОГРАММНОГО СРЕДСТВА
      Общая характеристика программного средства

Целью дипломного проекта является разработка Системы нормирования материалов по конструкторской документации для любых производств. 
Основными пользователями продукта будут являются технологи им система будет помогать считать(нормировать) узлы конструкторских изделий.
Также продуктом будет пользоваться главный технолог. Система нормирования материалов по конструкторской документации позволяит ему контролировать работу технологов, по графику в котором будет отоброжаться информация о посчитаных узлах конструкторского изделия. 

      Расчет затрат на разработку ПО

      Выполним упрощенный расчет затрат на разработку ПО в разрезе следующих статей: 
       затраты на основную заработную плату разработчиков; 
       затраты на дополнительную заработную плату разработчиков; 
       отчисления на социальные нужды; 
       прочие затраты; 

      Расчет затрат на основную заработную плату разработчиков 

      Затраты на основную заработную плату команды разработчиков определяются исходя из состава и численности команды, размеров месячной заработной платы каждого из участников команды, а также общей трудоемкости разработки программного обеспечения. 
      Расчет величины заработной платы участников команды осуществляется по формуле: 
       
      , 
       
      где 	n – количество исполнителей, занятых разработкой конкретного ПО, 
       	Tчi – часовая заработная плата i-го исполнителя, ti – трудоемкость работ, выполняемых i-м исполнителем 
       
      Часовую заработную плату определим путем деления месячной платы на количество рабочих часов в месяце (168). 
      Месячную заработную плату определим по фактическим данным предприятия, на котором проходилась преддипломная практика. Для разработки приложения будет задействован программист, месячная заработная плата определена в размере 1150 рублей; 
      Трудоемкость определим исходя из сложности разработки программного продукта и объема выполняемых им функций. После согласования с руководителем дипломного проекта от выпускающей кафедры трудоемкость програмиста принята в количестве 120 часов; 
      Также в затраты на основную заработную плату разработчиков входит премиальный фонд. Его размер определим, исходя из практики, сложившейся в организации, в размере 50 % от размера основной заработной платы. 
       
      Расчет затрат на основную заработную плату осуществим в форме таблицы. Таблица 6.1 – Затраты на основную заработную плату 
№ Участник команды Выполняемые работы Месяч ная 
зарабо тная 
плата, руб. Часовая заработн ая плата, руб. Трудоемко сть работ, часов Основная заработна я плата, руб. 1 2 3 4 5 6 7 1 Программист Разработка Развертывание 15008,931201 071,43ПРЕМИЯ 50%Итого затраты на основную заработную плату разработчиков1 607,14 
       Расчет 	затрат 	на 	дополнительную 	заработную 	плату
      
      Затраты на дополнительную заработную плату включает выплаты, предусмотренные законодательством о труде и определяется по формуле: 
       
      , 
       
       где З0 – затраты на основную заработную плату с учетом премии Нд – норматив дополнительной заработной платы, примем в размере 15% 
       
      Подставив исходные значения в формулу, получим: 
        
      З_д=(1607,14*15)/100=241,07 руб.
       

       Расчет затрат на социальные нужды
      
      Отчисления на социальные нужды определяются в соответствии с действующими законодательными актами по формуле: 
       
      ,
      где 	Нсоц – норматив отчислений на социальные нужды. Согласно действующему законодательству, отчисления в фонд социальной защиты населения и обязательного страхования составляют 34,6 % от фонда основной и дополнительной заработной платы исполнителей.  
      Подставив исходные значения в формулу, получим: 
      З_соц=((1607,14+241,07)*34,6)/100=639,48 руб.

       Расчет прочих затрат
      
      Дополнительные виды затрат, такие, как оплата консультационных услуг, необходимых для разработки ПО, оплата работ сторонней организации, приобретение права на использование уже существующего ПО и другие, для данного проекта не актуальны. 
      Также включим в расчет прочие затраты, связанные с разработкой ПО, такие как оплата аренды помещений, освещение, отопление, оплата серверов разработки и т.д. Расчет прочих затрат осуществляется в процентах от затрат на основную заработную плату разработчиков, с учетом премии, по формуле: 
       
      , 
      	где 	Нпз – норматив прочих затрат, примем в размере 120%. 
      Подставив исходные значения в формулу, получим: 
        
      З_ПЗ=(1607,14?120)/100=1928,57 руб.
      
       
      Полную сумму затрат на разработку программного обеспечения находим путем суммирования всех рассчитанных статей затрат. Соберем все данные в таблице. 
      Таблица 6.2 – Таблица затрат на разработку ПО 
Статья затрат Сумма, руб. Основная заработная плата команды разработчиков 1607,14Дополнительная заработная плата команды разработчиков 241,07Отчисления на социальные нужды 639,48Прочие затраты 1928,57Общая сумма затрат на разработку 4416,27
      Оценка результата от продажи ПО. Расчет экономического эффекта. 

      ПО, разрабатываемое в рамках дипломного проекта, является программным обеспечением для свободной реализации на рынке IT. Поэтому, экономический эффект организации-разработчика в данном случае заключается в получении прибыли от его продажи множеству потребителей. Прибыль от реализации в данном случае напрямую зависит от объемов продаж, цены реализации и затрат на разработку данного ПО. 
      Таким образом, необходимо сделать обоснование предполагаемого объема продаж – количество подписок на ПС, которое будет куплено клиентами за год. Для расчета необходимы данные некоторого, уже внедренного аналога. В большинстве случаев подобные данные закрыты, однако, ориентируясь на данные о среднем количестве подписок на подобные ПС, можно сделать вывод, что планируемое количество подписок в течение года – около 100. 
      Определим цену на одну подписку на ПС. 
      Рассчитаем цену, основываясь на подходе, при котором цена формируется под воздействием спроса и предложения. Расчет прибыли от продажи одной подписки на ПС осуществляется по формуле: 
      
      где 	Ц – цена реализации одной подписки 
       	Зр – сумма расходов на разработку и реализацию 
       	N – количество копий, купленных за год 
       	НДС – сумма налога на добавленную стоимость 
       Сумму затрат на реализацию примем в размере 10% от затрат на разработку, соответственно:  
      З_реал=(4416,27?10)/100=441,63 руб.
      
     Рассчитаем сумму затрат на реализацию и разработку: 
     Зр = Зразр + Зреал = 4416,27 + 441,63 = 4857,89 руб. 
      Цену одной подписки обоснуем средней ценой на аналогичное программное обеспечение на рынке. На данны момент цена более сложного аналога ПС на бессрочную лецензию состовляет 750 евро, с учетом того что мы выбрали временную лицензию (подписку) цена подписки будет составляет около 199 рублей. 
        	Сумму налога на добавленную стоимость можно рассчитать по формуле:  
      НДС=(Ц?%НДС)/(100+%НДС)=(199*20)/120=33,17 руб.
       
       Подставив вычисленные значения в исходную формулу, получим следующий результат: 
        
      П_ед=199-33,17-4857,89/100=160,98 руб.
       
       Суммарную годовую прибыль по проекту в целом рассчитаем следующим образом: 
       
     П = Пед ? N = 160,98 ? 100 = 16097,54 руб. 
       
       Чистая прибыль с учетом налога на прибыль рассчитывается по формуле: 
       
       
       Подставив текущее значение налога на прибыль – 18%, получим следующий результат: 
      ЧП=16097,54-(16097,54*18)/100=13199,99 руб.
 Расчет показателей эффективности инвестиций в разработку ПО 
      Рассчитаем коэффициент дисконтирования соответствующего года t, который осуществляется по формуле: 
 
 
 
      где 	Eн – норма дисконта, равная или больше средней процентной ставки по банковским депозитам действующей на момент осуществления расчетов, но не менее ставки рефинансирования; 
      t – порядковый номер года периода реализации инвестиционного проекта (2019 – 1) 
       
     Норму дисконта примем равной 14%.
 
     Коэффициент приведения (?t) по годам будет соответствовать следующим значениям: 
 
?1 = (1 + 0,14)1-1 = 1,000 -расчетный год; 

Чистый дисконтированный доход рассчитывается по формуле: 
 
, 
 
      где  	n - расчетный период, лет; 
       	Pt - результат, полученный в году t,руб.;  	
      Зt - затраты в году t, руб. 
 
      Рентабельность инвестиций рассчитывается как отношение суммы дисконтированных результатов к осуществленным инвестициям: 
 
 
 
      Расчет показателей эффективности инвестиций осуществим в табличной форме: 
Таблица 6.3 – Таблица показателей эффективности инвестиций 
ПоказательРасчетный период2019РЕЗУЛЬТАТЭкономический эффект13199,99Дисконтированный результат13199,99ЗАТРАТЫ Инвестиции в разработку программного средства4 857,89Дисконтированные инвестиции4 857,89Чистый дисконтированный доход по годам8 342,09Чистый дисконтированный доход нарастающим итогом3 484,20Коэффициент дисконтирования1
Рассчитаем рентабельность инвестиций: 
  
Р_Ц=8342,09/4857,89?100%=171,72%
      

      Выводы по технико-экономическому обоснованию 

      В результате технико-экономического обоснования применения программного продукта были получены следующие значения показателей их эффективности:
       Чистый дисонтированный доход за один года работы программы составит 8 342,09 руб.
       Чистая прибыль от реализации ЧП  = 13199,99 руб.  остается организации-разработчику и представляет собой экономический эффект от создания нового программного средства. 
       Продукт является экономически выгодным, так как он окупается чуть менее, чем за один год, а рентабельность составляет 171,72%. Таким образом, данная разработка является экономически целесообразной. 
ЗАКЛЮЧЕНИЕ
В ходе выполнения дипломного проекта было разработано клиент-серверное приложение, представляющее собой систему нормирования материалов, призванное облегчить, систематизировать и автоматизировать нормирование материалов изделий.
В ходе работы были изучены многие интересные технологии, при-званные облегчить и разнообразить разработку клиент-серверного при-ложения на платформе java. Были подробно изучены Фреймворк JavaFX и база данных MySQL. Так же был изучен и применён шаблон MVC.
На основе анализа, проектирования и расчетов создана Система нормирования материалов для заказчика, которая затем была внедрена в его предприятие. Мое решение позволило предприятию эффективно работать с поступающими заказами.
Разработанная Система нормирования материалов в конструкторской документации уже активно пользуется отдел технологического инжиниринга, что, в дополнение к хорошим отзывам от заказчика, является отличным доказательством востребованности разработки, а также удачности выбранных мной решений.

СПИСОК ИСПОЛЬЗОВАННЫХ ИСТОЧНИКОВ
      Java 8. Полное руководство, Герберт Шилдт, 2015
      MySQL — Википедия [Электронный ресурс]. – Режим?доступа: https://ru.wikipedia.org/wiki/MySQL. – Дата доступа: 01.04.2019.
      JavaFX | Введение [Электронный ресурс]. – Режим?доступа:  https://metanit.com/java/javafx/1.1.php. – Дата доступа: 01.04.2019.
      NetBeans — Википедия [Электронный ресурс]. – Режим?доступа:  https://ru.wikipedia.org/wiki/NetBeans. – Дата доступа: 01.04.2019.
      Нормирование материалов [Электронный ресурс]. – Режим?доступа:   https://ascon.ru/products/895/review. – Дата доступа: 01.04.2019.
      Intermech АРМ материального нормирования [Электронный ресурс]. – Режим?доступа:   www.intermech.ru/arm_matnorm.htm. – Дата доступа: 01.04.2019.

ПРИЛОЖЕНИЕ А. ЛИСТИНГ ПРОГРАММНОГО КОДА
Исходный код некоторых контроллеров:
      ParametersController.java
        package controllers;
        
        import com.jfoenix.controls.JFXTextField;
        import java.net.URL;
        import java.util.ResourceBundle;
        import javafx.fxml.FXML;
        import javafx.fxml.Initializable;
        import javafx.scene.input.KeyCode;
        import controllers.MainController.*;
        import static controllers.Variables.*;
        import models.SpecificationCommonMaterials;
        import java.sql.SQLException;
        import java.util.ArrayList;
        import javafx.application.Platform;
        import javafx.collections.FXCollections;
        import javafx.collections.ObservableList;
        import javafx.scene.Node;
        import javafx.stage.Stage;
        
        public class ParametersController implements Initializable
        {
        
            @FXML
            private JFXTextField jfxtextfieldLength;
            @FXML
            private JFXTextField jfxtextfieldWidth;
            @FXML
            private JFXTextField jfxtextfieldNomberOfLayers;
        
            double a;
            double b;
            double c;
            double result1;
            double result2;
        
            /**
             * Initializes the controller class.
             */
            @Override
            public void initialize(URL url, ResourceBundle rb)
            {
                jfxtextfieldLength.setOnKeyPressed((event) ->
                {
        
                    if (event.getCode() == KeyCode.ENTER)
                    {
                        jfxtextfieldWidth.requestFocus();
                    }
                });
                jfxtextfieldWidth.setOnKeyPressed((event) ->
                {
                    if (event.getCode() == KeyCode.ENTER)
                    {
                        jfxtextfieldNomberOfLayers.requestFocus();
                    }
                });
                jfxtextfieldNomberOfLayers.setOnKeyPressed((event) ->
                {
                    if (event.getCode() == KeyCode.ENTER)
                    {
                        try
                        {
                            a = Double.parseDouble(jfxtextfieldLength.getText());
                            b = Double.parseDouble(jfxtextfieldWidth.getText());
                            c = Double.parseDouble(jfxtextfieldNomberOfLayers.getText());
                            result1 = (a * b * 0.5 * c) / 1000000;
                            result2 = (a * b * 0.1) / 1000000;
                            if (type == "Bar")
                            {
                                insertCommonElementToDb("INSERT INTO ЭлементыВспомогательные ( IDЭлемента,IDВспомогательного,IDЦехаВ, вспа,вспб,вспв, НРМ)\n"
                                        + "VALUES(?,414,4," + a + "," + b + "," + c + "," + result1 + ");", idElement);
                                insertCommonElementToDb("INSERT INTO ЭлементыВспомогательные ( IDЭлемента,IDВспомогательного,IDЦехаВ, вспа, НРМ)\n"
                                        + "VALUES(?,333,4," + result1 + "," + result1 / 5 + ");", idElement);
                            }
                            else
                            {
                                insertCommonElementToDb("INSERT INTO ЭлементыВспомогательные ( IDЭлемента,IDВспомогательного,IDЦехаВ, вспа,вспб,вспв, НРМ)\n"
                                        + "VALUES(?,414,4," + a + "," + b + "," + c + "," + result1 + ");", idElement);
                                insertCommonElementToDb("INSERT INTO ЭлементыВспомогательные ( IDЭлемента,IDВспомогательного,IDЦехаВ, вспа, НРМ)\n"
                                        + "VALUES(?,333,4," + result1 + "," + result1 / 5 + ");", idElement);
                                insertCommonElementToDb("INSERT INTO ЭлементыВспомогательные ( IDЭлемента,IDВспомогательного,IDЦехаВ, вспа, НРМ)\n"
                                        + "VALUES(?,78,4, " + a + "," + (a / 1000) * 2 + ");", idElement);
                                if ((a * b) / 1000000 > 6.25)
                                {
                                    insertCommonElementToDb("INSERT INTO ЭлементыВспомогательные ( IDЭлемента,IDВспомогательного,IDЦехаВ, вспа, НРМ)\n"
                                            + "VALUES(?,63,4," + 1 + "," + 1 + ");", idElement);
                                    insertCommonElementToDb("INSERT INTO ЭлементыВспомогательные ( IDЭлемента,IDВспомогательного,IDЦехаВ, вспа, НРМ)\n"
                                            + "VALUES(?,415,4," + 0.5 + "," + 0.5 + ");", idElement);
                                    insertCommonElementToDb("INSERT INTO ЭлементыВспомогательные ( IDЭлемента,IDВспомогательного,IDЦехаВ, вспа, НРМ)\n"
                                            + "VALUES(?,358,4," + 2 + "," + (0.3 * 2) + ");", idElement);
                                    insertCommonElementToDb("INSERT INTO ЭлементыВспомогательные ( IDЭлемента,IDВспомогательного,IDЦехаВ, вспа,вспб,вспв, НРМ)\n"
                                            + "VALUES(?,1511421945,4," + a + "," + b + "," + 1 + "," + result2 + ");", idElement);
                                    insertCommonElementToDb("INSERT INTO ЭлементыВспомогательные ( IDЭлемента,IDВспомогательного,IDЦехаВ, вспа,вспб,вспв, НРМ)\n"
                                            + "VALUES(?,1511421945,8," + a + "," + b + "," + 1 + "," + result2 + ");", idElement);
        
                                }
                                else
                                {
                                    insertCommonElementToDb("INSERT INTO ЭлементыВспомогательные ( IDЭлемента,IDВспомогательного,IDЦехаВ, вспа, НРМ)\n"
                                            + "VALUES(?,63,4," + 0.5 + "," + 0.5 + ");", idElement);
                                    insertCommonElementToDb("INSERT INTO ЭлементыВспомогательные ( IDЭлемента,IDВспомогательного,IDЦехаВ, вспа, НРМ)\n"
                                            + "VALUES(?,415,4," + 0.25 + "," + 0.25 + ");", idElement);
                                    insertCommonElementToDb("INSERT INTO ЭлементыВспомогательные ( IDЭлемента,IDВспомогательного,IDЦехаВ, вспа, НРМ)\n"
                                            + "VALUES(?,358,4," + 1 + "," + (0.3 * 1) + ");", idElement);
                                    insertCommonElementToDb("INSERT INTO ЭлементыВспомогательные ( IDЭлемента,IDВспомогательного,IDЦехаВ, вспа,вспб,вспв, НРМ)\n"
                                            + "VALUES(?,1511421945,4," + a + "," + b + "," + 1 + "," + result2 + ");", idElement);
                                    insertCommonElementToDb("INSERT INTO ЭлементыВспомогательные ( IDЭлемента,IDВспомогательного,IDЦехаВ, вспа,вспб,вспв, НРМ)\n"
                                            + "VALUES(?,1511421945,8," + a + "," + b + "," + 1 + "," + result2 + ");", idElement);
                                }
                            }
                        }
                        catch (java.lang.NumberFormatException exception)
                        {
                            Stage stage = (Stage) ((Node) (event.getSource())).getScene().getWindow();
                            stage.close();
                        }
        
                        Stage stage = (Stage) ((Node) (event.getSource())).getScene().getWindow();
                        stage.close();
        
                    }
                });
            }
        
            private void insertCommonElementToDb(String sql, int id)
            {
        
                try
                {
                    if (connection == null)
                    {
                        System.out.println("Нет соединения с БД!");
                        System.exit(0);
                    }
                    preparedStatement = connection.prepareStatement(sql);
        
                    preparedStatement.setInt(1, id);
                    preparedStatement.executeUpdate();
        
                }
                catch (SQLException ex)
                {
                    ex.printStackTrace();
                }
                finally
                {
                    if (preparedStatement != null)
                    {
                        try
                        {
                            preparedStatement.close();
                        }
                        catch (SQLException ex)
                        {
        
                        }
                    }
                }
            }
        
        }
      Пример файла представления
      SplashScreenView.fxml
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.image.*?>
<?import java.lang.*?>
<?import java.util.*?>
<?import javafx.scene.*?>
<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>

<StackPane fx:id="rootPane" maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" xmlns="http://javafx.com/javafx/8" xmlns:fx="http://javafx.com/fxml/1" fx:controller="controllers.SplashScreenController">
   <children>
      <ImageView pickOnBounds="true" preserveRatio="true" StackPane.alignment="CENTER">
         <image>
            <Image url="@../resources/background.png" />
         </image>
      </ImageView>
   </children>
</StackPane>

Исходный код некоторых моделей:
      Elements.java
        package models;
         
        import javafx.beans.property.SimpleIntegerProperty;
        import javafx.beans.property.SimpleStringProperty;
        
        /**
         *
         * @author Unlimited
         */
        public class Elements
        {
        
            private final SimpleIntegerProperty Элементы_IDЭлементов;
            private final SimpleStringProperty Элементы_КТДЭ;
            private final SimpleStringProperty Элементы_Обозначение;
            private final SimpleStringProperty Элементы_Наименование;
            private final SimpleStringProperty Элементы_примечание;
        
            public Elements(int Элементы_IDЭлементов, String Элементы_КТДЭ, String Элементы_Обозначение, String Элементы_Наименование, String Элементы_примечание)
            {
                this.Элементы_IDЭлементов = new SimpleIntegerProperty(Элементы_IDЭлементов);
                this.Элементы_КТДЭ = new SimpleStringProperty(Элементы_КТДЭ);
                this.Элементы_Обозначение = new SimpleStringProperty(Элементы_Обозначение);
                this.Элементы_Наименование = new SimpleStringProperty(Элементы_Наименование);
                this.Элементы_примечание = new SimpleStringProperty(Элементы_примечание);
            }
        
            public int getЭлементы_IDЭлементов()
            {
                return Элементы_IDЭлементов.get();
            }
        
            public void setЭлементы_IDЭлементов(int value)
            {
                Элементы_IDЭлементов.set(value);
            }
        
            public SimpleIntegerProperty Элементы_IDЭлементовProperty()
            {
                return Элементы_IDЭлементов;
            }
        
            public String getЭлементы_КТДЭ()
            {
                return Элементы_КТДЭ.get();
            }
        
            public void setЭлементы_КТДЭ(String value)
            {
                Элементы_КТДЭ.set(value);
            }
        
            public SimpleStringProperty Элементы_КТДЭProperty()
            {
                return Элементы_КТДЭ;
            }
        
            public String getЭлементы_Обозначение()
            {
                return Элементы_Обозначение.get();
            }
        
            public void setЭлементы_Обозначение(String value)
            {
                Элементы_Обозначение.set(value);
            }
        
            public SimpleStringProperty Элементы_ОбозначениеProperty()
            {
                return Элементы_Обозначение;
            }
        
            public String getЭлементы_Наименование()
            {
                return Элементы_Наименование.get();
            }
        
            public void setЭлементы_Наименование(String value)
            {
                Элементы_Наименование.set(value);
            }
        
            public SimpleStringProperty Элементы_НаименованиеProperty()
            {
                return Элементы_Наименование;
            }
        
            public String getЭлементы_примечание()
            {
                return Элементы_примечание.get();
            }
        
            public void setЭлементы_примечание(String value)
            {
                Элементы_примечание.set(value);
            }
        
            public SimpleStringProperty Элементы_примечаниеProperty()
            {
                return Элементы_примечание;
            }
        }




















ОбозначениеНаименованиеДополнительные сведенияТекстовые документыБГУИР ДП 1–40 04 01 00 103 ПЗПояснительная записка42 с.Отзыв руководителяРецензияАкт внедренияГрафические документыГУИР.400401.103 ПД1Система нормирования материаловФормат А1по КД. Схема структуры программы.ГУИР.400401.103 ПД2Система нормирования материаловФормат А1по КД. Диаграмма классов.ГУИР.400401.103 ПД3Система нормирования материаловФормат А1по КД. Схема базы данных.ГУИР.400401.103 ПД4Система нормирования материаловФормат А1по КД. Схема программы.ГУИР.400401.103 ПЛ1Система нормирования материаловФормат А1по КД. Диаграмма потоков данных системы. Плакат.ГУИР.400401.103 ПЛ2Система нормирования материаловФормат А1по КД. Визуальный интерфейс Программного средства. Плакат.
БГУИР ДП 1-40 04 01 00 103 Д1 Изм.Л.№ докум.Подп.Дата


Система нормирования материалов в конструкторсокй документации.
Ведомость дипломного 
проекта.ЛитЛист  ЛистовРазраб. Авхимович А.В.Т4242Пров. Жвакина А.В.
ИиТП
гр. 493551Т.контр. Летохо А.С.Н.контр. Шиманский В.В.Утв. Волорова Н.А.



6



